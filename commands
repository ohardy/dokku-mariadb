#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

_path=".o_mariadb"
version="1.4"
db_image="ohardy/mariadb"

APP=$2
MARIADB_HOME="$DOKKU_ROOT/$_path"

check_already_exists() {
  if [[ -f "$MARIADB_HOME/db_$APP" ]]; then
    echo "Database configured already exists with name : $APP"
    exit 1
  fi
}

check_exists() {
  if [[ ! -f "$MARIADB_HOME/db_$APP" ]]&&[[ ! -f "$MARIADB_HOME/link_$APP" ]]; then
    echo "No database configured with name : $APP"
    exit 1
  fi
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "You must specify an app name"
    exit 1
  fi
}

check_container() {
  if [[ -z "$id" ]]; then
    echo "Mariadb container not started cannot continue. Start with dokku mariadb:start"
    exit 1
  fi
}

load_ip_and_container() {
  id=$(docker ps | grep "$db_image" | grep "manage start" | awk '{print $1}')
  container_name=""
  if [[ -n "$id" ]]; then
    ip_and_port=$(docker port ${id} 3306)
    private_ip=$(docker inspect ${id} | grep \"IPAddress\" | awk '{ print $2 }' | tr -d ',"')
    port=$(echo "$ip_and_port" | cut -d ':' -f 2)
    container_name=$(docker inspect -f "{{ .Name }}" $id)
  fi

  if [[ -n "$container_name" ]]; then
    _manage="-v $MARIADB_HOME/shared:/shared --link $container_name:db $db_image"
  else
    _manage="-v $MARIADB_HOME/shared:/shared $db_image"
  fi
}

manage_ti() {
  docker run -t -i $_manage "$@"
}

manage() {
  docker run $_manage "$@"
}

do_bash() {
  _envs=$(env_for)
  _cmd="docker run -t -i $_envs $db_image bash"
  $_cmd
}

db_url() {
  _app=$1

  _database=$(cat "$MARIADB_HOME/db_$_app")
  _database_pw=$(cat "$MARIADB_HOME/pass_$_app")

  echo "mysql2://${_database}:${_database_pw}@${private_ip}:${port}/${_database}"
}

database_name() {
  echo "$1" | cut -c 1-16 | tr .- _
}

migrate() {
  if [[ ! -f "$MARIADB_HOME/version" ]]; then
    cd "$MARIADB_HOME"
    _files=$(ls pass_* 2> /dev/null)
    for f in $_files; do
      _app_to_migrate=$(echo "$f" | cut -d _ -f 2)
      _database=$(database_name "$_app_to_migrate")
      echo "$_database" > "$MARIADB_HOME/db_$_app_to_migrate"

      if [[ -d "$DOKKU_ROOT/$_app_to_migrate" ]]; then
        dokku config:unset "$_app_to_migrate" DATABASE_URL
      fi
    done

  fi
  echo "$version" > "$MARIADB_HOME/version"
}

env_for() {
  if [[ -n "$1" ]]; then
    _app=$1
    if [[ -f "$MARIADB_HOME/db_$_app" ]]; then
      _url=$(db_url "$APP")
    elif [[ -f "$MARIADB_HOME/link_$_app" ]]; then
      _app=$(cat "$MARIADB_HOME/link_$_app")
      _url=$(db_url "$_app")
    fi

    if [[ -n "$_url" ]]; then
      if [[ -f "$MARIADB_HOME/db_$_app" ]]&&[[ -f "$MARIADB_HOME/pass_$_app" ]]; then
        _database=$(cat "$MARIADB_HOME/db_$_app")
        _database_pw=$(cat "$MARIADB_HOME/pass_$_app")

        echo "-e DATABASE_URL=$_url -e MARIADB_URL=$_url -e DB_TYPE=mysql -e DB_HOST=$private_ip -e DB_PORT=$port -e DB_NAME=$_database -e DB_USER=$_database -e DB_PASS=$_database_pw"
      fi
    fi
  else
    _database="mysql"
    _database_pw=$(cat "$MARIADB_HOME/admin_pw")

    echo "-e DB_HOST=$private_ip -e DB_PORT=$port -e DB_NAME=$_database -e DB_USER=root -e DB_PASS=$_database_pw"

  fi
}

restart_app() {
  _app=$1
  if [[ -n "$_app" ]]&&[[ -d "$DOKKU_ROOT/$_app" ]]; then
    echo "-----> Restarting application : $_app"
    dokku release $_app
    dokku deploy $_app
  fi
}

restart_apps() {
  echo "-----> Restarting applications"
  _apps=()

  cd "$MARIADB_HOME"
  _files=$(ls pass_* 2> /dev/null)
  for f in $_files; do
    _apps+=($(echo "$f" | cut -d _ -f 2))
  done

  _files=$(ls link_* 2> /dev/null)
  for f in $_files; do
    _apps+=($(cat "$MARIADB_HOME/$f"))
  done

  _apps=$(echo "${_apps[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')
  for _app in $_apps; do
    restart_app $_app
  done
}

[[ " mariadb:install help mariadb:help " == *" $1 "* ]] || load_ip_and_container

admin_pw=""
if [[ -f "$MARIADB_HOME/admin_pw" ]]; then
  admin_pw=$(cat "$MARIADB_HOME/admin_pw")
fi

case "$1" in
  mariadb:admin_console)
    check_container

    manage_ti admin_console "$admin_pw"
    ;;

  mariadb:console)
    check_container
    check_app
    check_exists

    database=$(cat "$MARIADB_HOME/db_$APP")
    database_pw=$(cat "$MARIADB_HOME/pass_$APP")

    manage_ti console "$database" "$database_pw"
    ;;

  mariadb:url)
    check_container
    check_app
    check_exists

    if [[ -f "$MARIADB_HOME/db_$APP" ]]; then
      db_url "$APP"
    elif [[ -f "$MARIADB_HOME/link_$APP" ]]; then
      APP=$(cat "$MARIADB_HOME/link_$APP")
      db_url "$APP"
    fi
    ;;

  mariadb:create)
    check_container
    check_app
    check_already_exists

    new_password=$(openssl rand -base64 32|base64)
    database=$(database_name "$APP")
    echo $database > "$MARIADB_HOME/db_$APP"
    echo $new_password > "$MARIADB_HOME/pass_$APP"
    chmod 700 "$MARIADB_HOME/db_$APP"
    chmod 700 "$MARIADB_HOME/pass_$APP"

    manage create "$database" "$admin_pw" "$new_password"
    ;;

  mariadb:delete)
    check_container
    check_app
    check_exists

    database=$(cat "$MARIADB_HOME/db_$APP")
    manage delete "$database" "$admin_pw"

    rm -f "$MARIADB_HOME/db_$APP"
    rm -f "$MARIADB_HOME/pass_$APP"

    ;;

  mariadb:list)
    check_container

    manage list "$admin_pw"
    ;;

  mariadb:bash)
    do_bash
    ;;

  mariadb:pre_build)
    if [[ -z "$id" ]]; then
      if [[ -d "$DOKKU_ROOT/$APP" ]]; then
        if [[ -n "$DOKKU_DEV" ]]; then
          ./commands mariadb:start
        else
          dokku mariadb:start
        fi

        sleep 5
      fi
    fi

    ;;

  mariadb:start)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container already running with ID: ${id}"
    else
      echo "-----> Starting MariaDB server"
      docker run -d -p 127.0.0.1:3306:3306 -v "$MARIADB_HOME/data:/var/lib/mysql" "$db_image" start
    fi
    restart_apps
    ;;

  mariadb:restart)
    if [[ ! -z "$DOKKU_DEV" ]]; then
      ./commands mariadb:stop
      ./commands mariadb:start
    else
      dokku mariadb:stop
      dokku mariadb:start
    fi
    ;;

  mariadb:init)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container already running with ID: ${id}"
    else
      docker run -d -p 127.0.0.1:3306:3306 -v "$MARIADB_HOME/data:/var/lib/mysql" "$db_image" init "$admin_pw"
    fi
    ;;

  mariadb:stop)
    check_container
    echo "-----> Stopping MariaDB server"
    manage shutdown "$admin_pw"
    docker stop ${id}
    ;;

  mariadb:dump)
    check_container
    check_app
    check_exists

    database=$(cat "$MARIADB_HOME/db_$APP")

    name=$(openssl rand -base64 32|base64)
    manage dump "$database" "$name" "$admin_pw"

    if [[ -f "$MARIADB_HOME/shared/$name" ]]; then
      cat "$MARIADB_HOME/shared/$name"
      rm -f "$MARIADB_HOME/shared/$name"
    fi
    ;;

  mariadb:restore)
    check_container
    check_app
    check_exists

    database=$(cat "$MARIADB_HOME/db_$APP")

    name=$(openssl rand -base64 32|base64)
    cat - > "$MARIADB_HOME/shared/$name"

    manage restore "$database" "$name" "$admin_pw"
    rm -f "$MARIADB_HOME/shared/$name"
    ;;

  mariadb:status)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container running with ID: ${id}"
      manage status "$admin_pw"
    else
      echo "Mariadb container not running"
    fi
    ;;

  mariadb:migrate)
    migrate
    ;;

  mariadb:link)
    check_container
    check_app
    check_exists

    if [[ ! -f "$MARIADB_HOME/link_$3" ]]; then
      echo "$APP" > "$MARIADB_HOME/link_$3"

      restart_app $3
    else
      echo "A link already exist for $3"
    fi
    ;;

  mariadb:unlink)
    check_container
    check_app
    check_exists

    if [[ -f "$MARIADB_HOME/link_$APP" ]]; then
      rm -f "$MARIADB_HOME/link_$APP"
    fi

    restart_app $APP
    ;;

  mariadb:env)
    env_for $APP
    ;;

  mariadb:install)
    if [[ -d "$MARIADB_HOME" ]]; then
      migrate
      echo "Mariadb data already exist in $MARIADB_HOME, installation aborded "
    fi

    if [[ ! -d "$MARIADB_HOME" ]]; then
      mkdir -p "$MARIADB_HOME/data"
      mkdir -p "$MARIADB_HOME/shared"

      echo "$version" > "$MARIADB_HOME/version"

      docker run "$db_image" cmd "cd /var/lib/mysql && tar -cp ./" | tar -x -C "$MARIADB_HOME/data/" -f -
      docker run "$db_image" cmd "rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql"
      docker run "$db_image" cmd "chown -R mysql:mysql /var/lib/mysql"

      if [[ ! -f "$MARIADB_HOME/admin_pw" ]]; then
        admin_pw=$(openssl rand -base64 32|base64)
        echo $admin_pw > "$MARIADB_HOME/admin_pw"

        chown -R dokku: "$MARIADB_HOME"
        chmod 700 "$MARIADB_HOME/admin_pw"

        if [[ ! -z "$DOKKU_DEV" ]]; then
          ./commands mariadb:init
        else
          dokku mariadb:init
        fi
      fi
    fi
    ;;

  mariadb:update)
    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    if [[ -d "$DIR/.git" ]]; then
      pushd "$DIR"
      dokku mariadb:stop
      git pull
      docker rmi "$db_image"
      docker pull "$db_image"
      dokku mariadb:migrate
      dokku mariadb:start
      popd
    fi
    ;;

  help | mariadb:help)
    HELP=$(cat<<EOF
    mariadb:console <app>, Launch a MariaDB console for a given app
    mariadb:env <app>, Get generated environment variables for <app>
    mariadb:url <app>, Get DATABASE_URL for <app>
    mariadb:create <app>, Create a MariaDB database
    mariadb:delete <app>, Delete specified MariaDB database
    mariadb:link <app> <another_app>, Give environment variable of database of <app> to <another_app>
    mariadb:unlink <another_app>, Unlink <another_app> to a database
    mariadb:dump <app> > <filename>, Dump database to SQL format
    mariadb:restore <app> < <filename>, Restore database from SQL format
    mariadb:admin_console, Launch a MariaDB console as admin user
    mariadb:restart, Restart the MariaDB docker container and linked app
    mariadb:start, Start the MariaDB docker container if it isn't running
    mariadb:stop, Stop the MariaDB docker container
    mariadb:status, Shows status of MariaDB
    mariadb:list, List all databases
    mariadb:update, Update this plugin
    mariadb:migrate, Migrate
EOF
)
    if [[ -n $DOKKU_API_VERSION ]]; then
      echo "$HELP"
    else
      cat && echo "$HELP"
    fi
    ;;

  *)
    exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
    ;;

esac
