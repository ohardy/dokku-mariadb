#!/bin/bash
#set -e;

_path=".o_mariadb"

APP=$2

OLDHOME=$HOME
HOME="$DOKKU_ROOT/$_path"

check_already_exists() {
  if [[ -f "$HOME/pass_$APP" ]]; then
    echo "Database configured already exists with name : $APP"
    exit 1
  fi
}

check_exists() {
  if [[ ! -f "$HOME/pass_$APP" ]]; then
    echo "No database configured with name : $APP"
    exit 1
  fi
}

check_app() {
  if [[ -z "$APP" ]]; then
    echo "You must specify an app name"
    exit 1
  fi
}

check_container() {
  if [[ -z "$id" ]]; then
    echo "Mariadb container not started cannot continue. Start with dokku mariadb:start"
    exit 1
  fi
}

database="${APP}"

db_image="ohardy/mariadb"



load_ip_and_container() {
  id=$(docker ps | grep "$db_image":latest | grep "manage start" | awk '{print $1}')
  container_name=""
  if [[ -n "$id" ]]; then
    ip_and_port=$(docker port ${id} 3306)
    ip=$(echo "$ip_and_port" | cut -d ':' -f 1)
    private_ip=$(docker inspect ${id} | grep IPAddress | awk '{ print $2 }' | tr -d ',"')
    port=$(echo "$ip_and_port" | cut -d ':' -f 2)
    container_name=$(docker inspect -f "{{ .Name }}" $id)
  fi

  if [[ -n "$container_name" ]]; then
    _manage="$HOME/data:/var/lib/mysql -v $HOME/shared:/shared --link $container_name:db $db_image"
  else
    _manage="$HOME/data:/var/lib/mysql -v $HOME/shared:/shared $db_image"
  fi
  manage="docker run -t -i -v $_manage"
}

load_ip_and_container

admin_pw=""
if [[ -f "$HOME/admin_pw" ]]; then
  admin_pw=$(cat "$HOME/admin_pw")
fi

case "$1" in
  mariadb:admin_console)
    check_container

    $manage admin_console "$admin_pw"
    ;;

  mariadb:console)
    check_container
    check_app
    check_exists

    database_pw=$(cat "$HOME/pass_$APP")

    $manage console "$database" "$database_pw"
    ;;

  mariadb:url)
    check_container
    check_app
    check_exists

    database_pw=$(cat "$HOME/pass_$APP")

    echo "mysql://${APP}:${database_pw}@${private_ip}:${port}/${database}"
    ;;
  mariadb:create)
    check_container
    check_app
    check_already_exists

    new_password=$(openssl rand -base64 32|base64)
    echo $new_password > "$HOME/pass_$APP"
    chmod 700 "$HOME/pass_$APP"

    $manage create "$database" "$admin_pw" "$new_password"

    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      dokku config:set "$APP" DATABASE_URL="mysql://${APP}:${new_password}@${private_ip}:${port}/${database}"
    fi
    ;;

  mariadb:delete)
    check_container
    check_app
    check_exists

    $manage delete "$database" "$admin_pw"

    rm -f "$HOME/pass_$APP"

    if [[ -d "$DOKKU_ROOT/$APP" ]]; then
      dokku config:unset "$APP" DATABASE_URL
    fi
    ;;

  mariadb:list)
    check_container

    $manage list "$admin_pw"
    ;;

  mariadb:bash)
    $manage bash
    ;;

  mariadb:start)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container already running with ID: ${id}"
    else
      docker run -d -p 127.0.0.1:3306:3306 -v "$HOME/data":"/var/lib/mysql" -v "$HOME/shared":"/shared" "$db_image" start
    fi
    ;;

  mariadb:init)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container already running with ID: ${id}"
    else
      $manage init "$admin_pw"
    fi
    ;;

  mariadb:stop)
    check_container
    docker stop ${id}
    ;;

  mariadb:dump)
    check_container
    check_app
    check_exists

    abspath=$(readlink -m $3)
    name=$(basename $abspath)
    $manage dump "$database" "$name" "$admin_pw"
    cp "$HOME/shared/$name" "$abspath"
    rm -f "$HOME/shared/$name"
    ;;

  mariadb:restore)
    check_container
    check_app
    check_exists

    abspath=$(readlink -m $3)
    name=$(basename $abspath)
    cp "$abspath" "$HOME/shared/$name"
    $manage restore "$database" "$name" "$admin_pw"
    rm -f "$HOME/shared/$name"
    ;;

  mariadb:status)
    if [[ "$id" != "" ]]; then
      echo "Mariadb container running with ID: ${id}"
    else
      echo "Mariadb container not running"
    fi
    ;;

  mariadb:install)
    if [[ -d "$HOME" ]]; then
      echo "Mariadb data already exist in "$HOME", installation aborded "
    fi

    if [[ ! -d "$HOME" ]]; then
      mkdir -p "$HOME/data"
      mkdir -p "$HOME/shared"

      docker run "$db_image" cmd "cd /var/lib/mysql && tar -cp ./" | tar -x -C "$HOME/data/" -f -
      docker run "$db_image" cmd "rm -rf /var/lib/mysql && mkdir -p /var/lib/mysql"
      docker run "$db_image" cmd "chown -R mysql:mysql /var/lib/mysql"

      if [[ ! -f "$HOME/admin_pw" ]]; then
        admin_pw=$(openssl rand -base64 32|base64)
        echo $admin_pw > "$HOME/admin_pw"

        chown dokku: "$HOME"
        chown dokku: "$HOME/admin_pw"
        chmod 700 "$HOME/admin_pw"

        if [[ ! -z "$DOKKU_DEV" ]]; then
          ./commands mariadb:init
        else
          dokku mariadb:init
        fi
      fi
    fi
    ;;
  psql:update)
    if [[ $(id -un) = "dokku" ]]; then
      dokku plugins-update
    fi

    DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    if [[ -d "$DIR/.git" ]]; then
      pushd "$DIR"
      dokku psql:stop
      sudo git pull
      docker rmi "$db_image"
      docker pull "$db_image"
      dokku psql:start
      popd
    fi
    ;;
  help)
    cat && cat<<EOF
    mariadb:console     <app>            Launch a MariaDB console for a given app
    mariadb:create      <app>            Create a MariaDB database
    mariadb:delete      <app>            Delete specified MariaDB database
    mariadb:dump        <app> <filename> Dump database to SQL format
    mariadb:restore     <app> <filename> Restore database from SQL format
    mariadb:admin_console                Launch a MariaDB console as admin user
    mariadb:start                        Start the MariaDB docker container if it isn't running
    mariadb:stop                         Stop the MariaDB docker container
    mariadb:status                       Shows status of MariaDB
    mariadb:list                         List all databases
    mariadb:update                       Update this plugin
EOF
    ;;
esac
